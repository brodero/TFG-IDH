---
title: "TFGfinal"
format: html
editor: visual 
embed-resources: true
---

# Librerias

```{r}
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning =FALSE )
library(pls) 
library(readxl)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(dplyr)#usar filter
library(sf)
library(spdep)
library(jsonlite)
library(leaflet)
library(ggpubr)
library(dplyr)
library(quarto)
library(mgcv)
library(car)
library(performance)
library(betaselectr)
library(ggpubr)
library(dygraphs)
library(xts)
library(vtable) 
library(glmmTMB)

```

# Datos y Limpieza

qqnorm pero qqbeta. x cuantiles de la beta de un continente y en y cuntiles de la muestra y en otro color los cuantiles de la normal

A continuación, se procede a la carga de las bases de datos correspondientes al continente africano. Se han utilizado dos *data frames* separados, ya que durante el proceso de descarga algunos países no fueron seleccionados inicialmente. Por este motivo, se optó por mantener ambas bases de datos por separado para conservar la coherencia y facilitar su posterior manejo.

```{r}
IDHAFRICA1<-read_xlsx("IDHAFRICA.xlsx")

IDHAFRICAFALTANTES1<-read_xlsx("AFRICAF.xlsx")
# Añadir la columna "CONTINENTE"
IDHAFRICA1$CONTINENTE <- "AFRICA"
IDHAFRICAFALTANTES1$CONTINENTE <- "AFRICA"
```

Cargo los datos de IDH de Europa:

```{r}
IDHEUROPA1<-read_xlsx("IDHEUROPA.xlsx")
IDHEUROPA1$CONTINENTE <- "EUROPA"

```

Borro columnas de información irrelevante y ordeno alfabéticamente las dos bases de datos.

```{r}
IDHAFRICAFALTANTES1 <- IDHAFRICAFALTANTES1 %>% #borro columnas
  select(-3, -4, -5,-6,-10)
IDHAFRICA1 <- IDHAFRICA1 %>% 
  select(-3, -4, -5,-6,-10) #borro columnas
IDHAFRICAFALTANTES1 <- IDHAFRICAFALTANTES1 %>% 
   arrange(IDHAFRICAFALTANTES1[[1]])
IDHAFRICA1 <- IDHAFRICA1 %>%
  arrange(IDHAFRICA1[[1]]) #ordeno alf abeticamente


```

```{r}
IDHEUROPA1 <- IDHEUROPA1 %>%
  select(-3, -4, -5,-6,-10)
IDHEUROPA1<- IDHEUROPA1%>%
  arrange(IDHEUROPA1[[1]])
```

Borro bases de datos del 1990-1999 debido a que muchas variables utilizadas más adelante solo disponian de datos del 2000 al 2020.

```{r}
IDHEUROPA <- IDHEUROPA1 %>%
  filter(!(year >= 1990 & year <= 1999))
```

```{r}
IDHAFRICA <- IDHAFRICA1 %>%
  filter(!(year >= 1990 & year <= 1999))
IDHAFRICAFALTANTES <- IDHAFRICAFALTANTES1 %>%
  filter(!(year >= 1990 & year <= 1999))
```

Cargo la base de datos obtenidas del centro de datos de la ONU y realizamos

```{r}

CARACTEUROPA <- read_xlsx("CARACTEUROPA.xlsx")
CARACTAFRICA <- read_xlsx("CARACTAFRICA.xlsx")
CARACTEUROPA<-  CARACTEUROPA %>%
  select(-3, -4, -5,-6,-10)
CARACTEUROPA <- CARACTEUROPA%>%
  arrange(CARACTEUROPA[[1]])
CARACTAFRICA <- CARACTAFRICA %>%
  select(-3, -4, -5,-6,-10)
CARACTAFRICA <- CARACTAFRICA%>%
  arrange(CARACTAFRICA[[1]])
CARACTAFRICA$CONTINENTE <- "AFRICA"
CARACTEUROPA$CONTINENTE <- "EUROPA"

```

```{r}

GASTOSALUD<- read_xlsx("datosgastosalud.xlsx")
GASTOSALUD <- GASTOSALUD[,-c(3:44)]



```

```{r}
AccesoElectricidad <- read_xlsx("Acceso electricidad.xlsx")
```

```{r}
AGUAPOTABLE <-  read_xlsx("AGUA POTABLE.xlsx")
AGUAPOTABLE <-AGUAPOTABLE[,-c(3:44)]
```

```{r}
CPI<-read_csv("cpi.csv")
years_to_normalize <- as.character(1995:2011)

# Multiplicar por 10 los valores de esos años
CPI[years_to_normalize] <- CPI[years_to_normalize] * 10
CPI <-CPI [,-3]
```

```{r}
names(CPI)[1] <- "Country Name"
```

```{r}
names(CPI)[2] <- "ISO"
```

```         
```

```{r}

CARACTEUROPA <- read_xlsx("CARACTEUROPA.xlsx")
CARACTAFRICA <- read_xlsx("CARACTAFRICA.xlsx")
CARACTEUROPA<-  CARACTEUROPA %>%
  select(-3, -4, -5,-6,-10)
CARACTEUROPA <- CARACTEUROPA%>%
  arrange(CARACTEUROPA[[1]])
CARACTAFRICA <- CARACTAFRICA %>%
  select(-3, -4, -5,-6,-10)
CARACTAFRICA <- CARACTAFRICA%>%
  arrange(CARACTAFRICA[[1]])
CARACTAFRICA$CONTINENTE <- "AFRICA"
CARACTEUROPA$CONTINENTE <- "EUROPA"

```

```{r}

IDHAFRICA<- IDHAFRICA %>%
  pivot_wider(
    names_from = indicator,   # Los valores de la columna 'indicator' serán las nuevas columnas
    values_from = value       # Los valores de la columna 'value' serán los que se asignen a las nuevas columnas
  )

# Ver el resultado
head(IDHAFRICA)
#sigo sin juntarlo porque ocurren problemas
IDHAFRICAFALTANTES<- IDHAFRICAFALTANTES%>%
  pivot_wider(
    names_from = indicator,   # Los valores de la columna 'indicator' serán las nuevas columnas
    values_from = value       # Los valores de la columna 'value' serán los que se asignen a las nuevas columnas
  )

# Ver el resultado
head(IDHAFRICAFALTANTES)
# Guardar el resultado en un nuevo archivo
write.csv(IDHAFRICAFALTANTES, "IDHAFRICAFALTANTES_pivoted.csv", row.names = FALSE)


```

```{r}

IDHEUROPA<- IDHEUROPA %>%
  pivot_wider(
    names_from = indicator,   # Los valores de la columna 'indicator' serán las nuevas columnas
    values_from = value       # Los valores de la columna 'value' serán los que se asignen a las nuevas columnas
  )

# Ver el resultado
head(IDHEUROPA)
write.csv(IDHEUROPA, "IDHEUROPE_pivoted.csv", row.names = FALSE)
```

```{r}

CARACTEUROPA<- CARACTEUROPA %>%
  pivot_wider(
    names_from = indicator,   # Los valores de la columna 'indicator' serán las nuevas columnas
    values_from = value       # Los valores de la columna 'value' serán los que se asignen a las nuevas columnas
  )

# Ver el resultado
head(CARACTEUROPA)
write.csv(CARACTEUROPA, "CARACTEUROPA_pivoted.csv", row.names = FALSE)
```

```{r}
CARACTAFRICA<- CARACTAFRICA %>%
  pivot_wider(
    names_from = indicator,   # Los valores de la columna 'indicator' serán las nuevas columnas
    values_from = value       # Los valores de la columna 'value' serán los que se asignen a las nuevas columnas
  )

# Ver el resultado
head(CARACTAFRICA)
write.csv(CARACTAFRICA, "CARACTAFRICA_pivoted.csv", row.names = FALSE)
```

```{r}
IDH <- rbind(IDHAFRICA, IDHEUROPA,IDHAFRICAFALTANTES)
CARACT <- rbind(CARACTEUROPA, CARACTAFRICA)
IDH <- IDH %>%
  arrange(IDH[[1]]) 
CARACT <- CARACT %>%
  arrange(CARACT[[1]]) 
unique_isocodes <- n_distinct(IDH$countryIsoCode)
unique_isocodes #hay103 paises
unique_isocodes1<- n_distinct(CARACT$countryIsoCode)
unique_isocodes1#hay103 paises con lo cual concuerdaa



#Cambiamos los nombres columnas 
colnames(IDH)[7] <- "HDI" 
colnames(IDH)[1] <- "ISO"
colnames(IDH)[5] <- "EYS" #Expected years of schooling
colnames(IDH)[6] <- "GNP"#GROS NATIONAL INCOME
colnames(IDH)[9] <- "LEB" #life expectancy at birth
colnames(IDH)[10] <- "MYS" #mean years of schooling
colnames(CARACT)[1] <- "ISO"
colnames(CARACT)[5] <- "CO2"
colnames(CARACT)[6] <- "CHI" #Coefficient of human inequality"
colnames(CARACT)[7] <- "GII" #Gender Inequality Index
colnames(CARACT)[8] <- "IE" #Inequality in eduation
colnames(CARACT)[9] <- "II" #Inequality in income
colnames(CARACT)[10] <- "ILE" #Inequality in life expectancy
colnames(CARACT)[11] <- "LFPF" #Labour force participation rate, female(relacionado conel GII) describe el empowerment
colnames(CARACT)[12] <- "LFPM" #Labour force participation rate, male(relacionado conel GII)
colnames(CARACT)[13] <- "MFC" #Material footprint per capita (tonnes)
colnames(CARACT)[14] <- "MMR" #Maternal Mortality Ratio (relacionado conel GII)
colnames(CARACT)[15] <- "SSPF" #Share of seats in parliament, female(relacionado conel GII)
colnames(CARACT)[16] <- "SSPM" #Share of seats in parliament, male (relacionado conel GII)
```

```{r}
paisesmapa <- st_read("mapabueno1.geojson")
#borramos monaco y andorra 
IDH_filtrado <- IDH[!IDH$ISO %in% c("AND", "MCO"), ]
head(IDH_filtrado)
IDH_filtrado <- IDH_filtrado%>%
  arrange(IDH_filtrado[[1]], IDH_filtrado[[3]])
CARACT <- CARACT[!CARACT$ISO %in% c("AND", "MCO"), ]
ISOCODE1 <- unique(CARACT$ISO)
CARACT <- CARACT %>%
  arrange(CARACT[[1]], CARACT [[3]])
```

```{r}
GASTOSALUD <- GASTOSALUD %>%
  arrange(GASTOSALUD[[1]])
unique_isocodes <- n_distinct(IDH$ISO)
unique_isocodes 
unique_isocodes2<- n_distinct(GASTOSALUD$`Country Code`)
unique_isocodes2
GASTOSALUD <- GASTOSALUD %>%
  semi_join(IDH, by = c("Country Code" = "ISO"))
GASTOSALUD <- GASTOSALUD %>%
  pivot_longer(
    cols = 3:ncol(.),           # Desde la 3ra columna hasta el final (los años)
    names_to = "year",          # Nueva columna con los años
    values_to = "gasto_salud"   # Nueva columna con los valores del indicador
  ) %>%
  mutate(year = as.numeric(year))  # Convierte los años a numéricos

GASTOSALUD <- GASTOSALUD %>%
  left_join(CARACT %>% select(ISO, CONTINENTE) %>% distinct(), by = c("Country Code" = "ISO"))
GASTOSALUD <- GASTOSALUD %>%
  rename(ISO = `Country Code`)
CARACT$year <- as.numeric(CARACT$year)
GASTOSALUD$year <- as.numeric(GASTOSALUD$year)
names(CARACT)
names(GASTOSALUD)
```

```{r}
CARACT <- CARACT %>%
   left_join(GASTOSALUD, by = c("ISO", "year"))
```

```{r}
CARACT<- CARACT %>%
  select(-CONTINENTE.y) %>%  # borra la que no quieres
  rename(CONTINENTE = CONTINENTE.x)  # renombra la que te quedas

```

```{r}
CARACT <- CARACT %>% #borro columnas
  select(-17)
```

```{r}
AccesoElectricidad <- AccesoElectricidad %>%
  arrange(AccesoElectricidad[[1]])
unique_isocodes5 <- n_distinct(IDH$ISO)
unique_isocodes5 
unique_isocodes6<- n_distinct(AccesoElectricidad$`Country Code`)
unique_isocodes6
AccesoElectricidad<- AccesoElectricidad %>%
  semi_join(IDH, by = c("Country Code" = "ISO"))
AccesoElectricidad <- AccesoElectricidad %>% select(c(-3,-4))
AccesoElectricidad <- AccesoElectricidad %>%
  pivot_longer(
    cols = 3:ncol(.),           # Desde la 3ra columna hasta el final (los años)
    names_to = "year",          # Nueva columna con los años
    values_to = "AccesoElectricidad"   # Nueva columna con los valores del indicador
  ) %>%
  mutate(year = as.numeric(year))  # Convierte los años a numéricos

AccesoElectricidad <- AccesoElectricidad %>%
  left_join(CARACT %>% select(ISO, CONTINENTE) %>% distinct(), by = c("Country Code" = "ISO"))
AccesoElectricidad<-AccesoElectricidad %>%
  rename(ISO = `Country Code`)
CARACT$year <- as.numeric(CARACT$year)
AccesoElectricidadOyear <- as.numeric(AccesoElectricidad$year)
names(CARACT)
names(AccesoElectricidad)

```

```{r}
AccesoElectricidad <- AccesoElectricidad %>%
  filter(!(year >= 1960 & year <= 1999))
```

```{r}
CARACT <- CARACT %>%
   left_join(AccesoElectricidad, by = c("ISO", "year"))

```

```{r}
CARACT<- CARACT %>%
  select(-CONTINENTE.y) %>%  # borra la que no quieres
  rename(CONTINENTE = CONTINENTE.x)  # renombra la que te quedas
```

```{r}
CARACT <- CARACT %>% #borro columnas
  select(-18)
```

```{r}
ISOCODE <- unique(IDH_filtrado$ISO)
# Imprimir la lista de códigos de país combinados
print(ISOCODE)#hay103
isocodes_no_en_paises <- setdiff(ISOCODE, paisesmapa$iso3)
paises_filtrados <- paisesmapa[paisesmapa$iso3 %in% IDH_filtrado$ISO, ]
paises_filtrados <- paises_filtrados  %>% arrange(paises_filtrados[2])
print(ISOCODE)
# borro de tu base de datos paises que no necesito 
head(paises_filtrados)
```

```{r}

AGUAPOTABLE <- AGUAPOTABLE%>%
  arrange(AGUAPOTABLE[[1]])
AGUAPOTABLE <- AGUAPOTABLE %>%
  semi_join(IDH, by = c("Country Code" = "ISO"))
AGUAPOTABLE <- AGUAPOTABLE %>%
  pivot_longer(
    cols = 3:ncol(.),           # Desde la 3ra columna hasta el final (los años)
    names_to = "year",          # Nueva columna con los años
    values_to = "AGUAPOTABLE"   # Nueva columna con los valores del indicador
  ) %>%
  mutate(year = as.numeric(year))  # Convierte los años a numéricos

AGUAPOTABLE <- AGUAPOTABLE %>%
  left_join(CARACT %>% select(ISO, CONTINENTE) %>% distinct(), by = c("Country Code" = "ISO"))
AGUAPOTABLE <- AGUAPOTABLE %>%
  rename(ISO = `Country Code`)
CARACT$year <- as.numeric(CARACT$year)
AGUAPOTABLE$year <- as.numeric(AGUAPOTABLE$year)
names(CARACT)
names(AGUAPOTABLE)

```

```{r}
CARACT <- CARACT %>%
   left_join(AGUAPOTABLE, by = c("ISO", "year"))
```

```{r}
CARACT<- CARACT %>%
  select(-CONTINENTE.y) %>%  # borra la que no quieres
  rename(CONTINENTE = CONTINENTE.x)  # renombra la que te quedas

```

```{r}
CARACT <- CARACT %>% #borro columnas
  select(-19)
```

```{r}

# Ordena los datos por la primera columna (Country Name)
CPI <- CPI %>%
  arrange(CPI[[1]])

# Realiza un semi_join con el dataframe IDH usando la columna 'ISO' en CPI y 'ISO' en IDH
CPI <- CPI %>%
  semi_join(IDH, by = c("ISO" = "ISO"))

# Transformar los datos de CPI a formato largo (long format), de modo que cada año se convierta en una fila
CPI <- CPI %>%
  pivot_longer(
    cols = 3:ncol(.),          # Desde la 3ra columna hasta el final (los años de CPI)
    names_to = "year",         # Nueva columna con los años
    values_to = "CPI"          # Nueva columna con los valores del CPI
  ) %>%
  mutate(year = as.numeric(year))  # Convierte los años a numéricos

# Si tienes un dataframe CARACT con la columna ISO y CONTINENTE, lo unimos
CPI <- CPI %>%
  left_join(CARACT %>% select(ISO, CONTINENTE) %>% distinct(), by = c("ISO" = "ISO"))

# Renombramos la columna 'Country Code' a 'ISO' si es necesario (en este caso no es necesario)
# CPI <- CPI %>%
#   rename(ISO = `Country Code`)   # Solo haz esto si la columna 'ISO' en CPI necesita ser renombrada

# Aseguramos que 'year' en CARACT y CPI esté en formato numérico
CARACT$year <- as.numeric(CARACT$year)
CPI$year <- as.numeric(CPI$year)


```

```{r}
CARACT <- CARACT %>%
   left_join(CPI, by = c("ISO", "year"))
```

```{r}
CARACT<- CARACT %>%
  select(-CONTINENTE.y) %>%  # borra la que no quieres
  rename(CONTINENTE = CONTINENTE.x)  # renombra la que te quedas
```

```{r}
CARACT <- CARACT %>% #borro columnas
  select(-20)
```

Para podemos utilzar una distribución beta debemos comprobar que no hay valores 0 o 1.

```{r}
sum(IDH$HDI == 1)
sum(IDH$HDI == 0)
```

# Analisis Exploratorio

```{r}

media_por_continente <- IDH %>%
  group_by(CONTINENTE, year) %>%
  summarise(media_idh = mean(HDI, na.rm = TRUE), .groups = "drop")

# Convertir a dos arrays separados (uno por continente)
europa <- media_por_continente %>%
  filter(CONTINENTE == "Europa") %>%
  pull(media_idh)

africa <- media_por_continente %>%
  filter(CONTINENTE == "África") %>%
  pull(media_idh)
CARACT <- CARACT %>%
  filter(!(year >= 1990 & year <= 1999))
# Combinar los data frames por la columna común 'País'
combined_data <- merge(IDH, CARACT, by = c('country', 'year','CONTINENTE','ISO'))
# Crear el gráfico de puntos
africa_data <- combined_data[combined_data$CONTINENTE == "AFRICA", ]
europa_data <- combined_data[combined_data$CONTINENTE == "EUROPA", ]
```

```{r}
africa_subset <- africa_data %>%
  select(7,11,13,17:26)
europa_subset <- europa_data %>%
  select(7,11,13,17:26)
```

```{r}
sumtable(
  africa_subset ,
  add.median = FALSE,     # opcional: si no quieres medianas
  title = "",             # sin título          # salida en consola
  summ = c("min(x)","pctile(x)[25]","pctile(x)[50]","mean(x)", "sd(x)","pctile(x)[75]",  "max(x)")  # puedes personalizar las estadísticas
)

```

```{r}
sumtable(
  europa_subset,
  add.median = FALSE,     # opcional: si no quieres medianas
  title = "",             # sin título          # salida en consola
  summ = c("min(x)","pctile(x)[25]","pctile(x)[50]","mean(x)", "sd(x)","pctile(x)[75]",  "max(x)")  # puedes personalizar las estadísticas
)

```

```{r}
ggplot(africa_data, aes(x = as.factor(year), y = HDI)) +
  # Violin pastel
  geom_violin(fill = "#D0E6F6", color = NA, alpha = 0.9, trim = FALSE) +
  # Boxplot más ancho y con línea más gruesa
  geom_boxplot(
    width = 0.4,                     # más ancho (0.4 en lugar de 0.2)
    fill = NA, 
    color = "#5B8DB8", 
    outlier.shape = NA,
    linewidth = 0.8                  # línea más gruesa
  ) +
  # Puntos
  geom_jitter(width = 0.15, size = 1.3, color = "#2C5F8A", alpha = 0.6) +
  # Mediana en rojo pastel
  stat_summary(
    fun = median, geom = "point", shape = 21, size = 2.5,
    fill = "#F08080", color = "black", stroke = 0.6
  ) +
  labs(
    x = "Año", y = "Índice de Desarrollo Humano"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
    plot.title = element_text(face = "bold", size = 14),
    axis.title = element_text(size = 12)
  )

```

```{r}
ggplot(europa_data, aes(x = as.factor(year), y = HDI)) +
  # Violin pastel
  geom_violin(fill = "#D0E6F6", color = NA, alpha = 0.9, trim = FALSE) +
  # Boxplot más ancho y con línea más gruesa
  geom_boxplot(
    width = 0.4,                     # más ancho (0.4 en lugar de 0.2)
    fill = NA, 
    color = "#5B8DB8", 
    outlier.shape = NA,
    linewidth = 0.8                  # línea más gruesa
  ) +
  # Puntos
  geom_jitter(width = 0.15, size = 1.3, color = "#2C5F8A", alpha = 0.6) +
  # Mediana en rojo pastel
  stat_summary(
    fun = median, geom = "point", shape = 21, size = 2.5,
    fill = "#F08080", color = "black", stroke = 0.6
  ) +
  labs(
    x = "Año", y = "Índice de Desarrollo Humano"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
    plot.title = element_text(face = "bold", size = 14),
    axis.title = element_text(size = 12)
  )

```

```{r}
ggplot(europa_data, aes(x = as.factor(year), y = HDI)) +
  # Violin pastel
  geom_violin(fill = "#D0E6F6", color = NA, alpha = 0.9, trim = FALSE) +
  # Boxplot más ancho y con línea más gruesa
  geom_boxplot(
    width = 0.4,                     # más ancho (0.4 en lugar de 0.2)
    fill = NA, 
    color = "#5B8DB8", 
    outlier.shape = NA,
    linewidth = 0.8                  # línea más gruesa
  ) +
  # Puntos
  geom_jitter(width = 0.15, size = 1.3, color = "#2C5F8A", alpha = 0.6) +
  # Mediana en rojo pastel
  stat_summary(
    fun = median, geom = "point", shape = 21, size = 2.5,
    fill = "#F08080", color = "black", stroke = 0.6
  ) +
  labs(
    x = "Año", y = "Índice de Desarrollo Humano"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
    plot.title = element_text(face = "bold", size = 14),
    axis.title = element_text(size = 12)
  )
```

```{r}
hdi_quantiles <- africa_data %>%
  group_by(year) %>%
  summarise(
    Q1 = quantile(HDI, 0.25, na.rm = TRUE),
    Q2 = quantile(HDI, 0.50, na.rm = TRUE),
    Q3 = quantile(HDI, 0.75, na.rm = TRUE)
  ) %>%
  mutate(date = as.Date(paste0(year, "-01-01")))

# Paso 2: convertir a xts
hdi_xts <- xts(hdi_quantiles[, c("Q1", "Q2", "Q3")], order.by = hdi_quantiles$date)

# Paso 3: gráfico interactivo con estilo
dygraph(hdi_xts, main = "Distribución del HDI en África (cuantiles)") %>%
  dySeries("Q1", label = "Q1 (25%)", color = "#1b9e77") %>%
  dySeries("Q2", label = "Mediana", color = "#984ea3") %>%
  dySeries("Q3", label = "Q3 (75%)", color = "#377eb8") %>%
  dyOptions(strokeWidth = 2.5) %>%
  dyHighlight(
    highlightCircleSize = 5,
    highlightSeriesBackgroundAlpha = 0.2,
    highlightSeriesOpts = list(strokeWidth = 4)
  ) %>%
  dyRangeSelector(height = 30, strokeColor = "#666", fillColor = "#d0ebff")
```

```{r}
hdi_quantiles1 <- europa_data %>%
  group_by(year) %>%
  summarise(
    Q1 = quantile(HDI, 0.25, na.rm = TRUE),
    Q2 = quantile(HDI, 0.50, na.rm = TRUE),
    Q3 = quantile(HDI, 0.75, na.rm = TRUE)
  ) %>%
  mutate(date = as.Date(paste0(year, "-01-01")))

# Paso 2: convertir a xts
hdi_xts <- xts(hdi_quantiles1[, c("Q1", "Q2", "Q3")], order.by = hdi_quantiles1$date)

# Paso 3: gráfico interactivo con estilo
dygraph(hdi_xts, main = "Distribución del HDI en Europa (cuantiles)") %>%
  dySeries("Q1", label = "Q1 (25%)", color = "#1b9e77") %>%
  dySeries("Q2", label = "Mediana", color = "#984ea3") %>%
  dySeries("Q3", label = "Q3 (75%)", color = "#377eb8") %>%
  dyOptions(strokeWidth = 2.5) %>%
  dyHighlight(
    highlightCircleSize = 5,
    highlightSeriesBackgroundAlpha = 0.2,
    highlightSeriesOpts = list(strokeWidth = 4)
  ) %>%
  dyRangeSelector(height = 30, strokeColor = "#666", fillColor = "#d0ebff")
```

```{r}
media_por_continente2 <- IDH %>%
  group_by(CONTINENTE, year) %>%
  summarise(media_LEB = mean(LEB, na.rm = TRUE), .groups = "drop")

# Convertir a dos arrays separados (uno por continente)
europa2<- media_por_continente2 %>%
  filter(CONTINENTE == "Europa") %>%
  pull(media_LEB)

africa2 <- media_por_continente2 %>%
  filter(CONTINENTE == "África") %>%
  pull(media_LEB)

graficoLEBE<- ggplot(media_por_continente2 %>% filter(CONTINENTE == "EUROPA"), 
                         aes(x = year, y = media_LEB, group = CONTINENTE, color = CONTINENTE)) +
  geom_line() +
  theme_minimal() +theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  labs(title = "Europa", x = "Año", y = "LEB") +
  theme(legend.position = "none")

graficoLEBA <-ggplot(media_por_continente2 %>% filter(CONTINENTE == "AFRICA"), 
                         aes(x = year, y = media_LEB, group = CONTINENTE, color = CONTINENTE)) +
  geom_line() +
  theme_minimal() +theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  labs(title = "AFRICA", x = "Año", y = "LEB") +
  theme(legend.position = "none")
```

```{r}
hdi_quantiles1 <- europa_data %>%
  group_by(year) %>%
  summarise(
    Q1 = quantile(LEB, 0.25, na.rm = TRUE),
    Q2 = quantile(LEB, 0.50, na.rm = TRUE),
    Q3 = quantile(LEB, 0.75, na.rm = TRUE)
  ) %>%
  mutate(date = as.Date(paste0(year, "-01-01")))

# Paso 2: convertir a xts
hdi_xts <- xts(hdi_quantiles1[, c("Q1", "Q2", "Q3")], order.by = hdi_quantiles1$date)

# Paso 3: gráfico interactivo con estilo
dygraph(hdi_xts, main = "Distribución de la esperanza de vida en Europa (cuantiles)") %>%
  dySeries("Q1", label = "Q1 (25%)", color = "#1b9e77") %>%
  dySeries("Q2", label = "Mediana", color = "#984ea3") %>%
  dySeries("Q3", label = "Q3 (75%)", color = "#377eb8") %>%
  dyOptions(strokeWidth = 2.5) %>%
  dyHighlight(
    highlightCircleSize = 5,
    highlightSeriesBackgroundAlpha = 0.2,
    highlightSeriesOpts = list(strokeWidth = 4)
  ) %>%
  dyRangeSelector(height = 30, strokeColor = "#666", fillColor = "#d0ebff")
```

```{r}
hdi_quantiles1 <- europa_data %>%
  group_by(year) %>%
  summarise(
    Q1 = quantile(GNP, 0.25, na.rm = TRUE),
    Q2 = quantile(GNP, 0.50, na.rm = TRUE),
    Q3 = quantile(GNP, 0.75, na.rm = TRUE)
  ) %>%
  mutate(date = as.Date(paste0(year, "-01-01")))

# Paso 2: convertir a xts
hdi_xts <- xts(hdi_quantiles1[, c("Q1", "Q2", "Q3")], order.by = hdi_quantiles1$date)

# Paso 3: gráfico interactivo con estilo
dygraph(hdi_xts, main = "Distribución del ingreso nacional bruto en Europa (cuantiles)") %>%
  dySeries("Q1", label = "Q1 (25%)", color = "#1b9e77") %>%
  dySeries("Q2", label = "Mediana", color = "#984ea3") %>%
  dySeries("Q3", label = "Q3 (75%)", color = "#377eb8") %>%
  dyOptions(strokeWidth = 2.5) %>%
  dyHighlight(
    highlightCircleSize = 5,
    highlightSeriesBackgroundAlpha = 0.2,
    highlightSeriesOpts = list(strokeWidth = 4)
  ) %>%
  dyRangeSelector(height = 30, strokeColor = "#666", fillColor = "#d0ebff")
```

```{r}
media_por_continente1 <- IDH %>%
  group_by(CONTINENTE, year) %>%
  summarise(media_GNP = mean(GNP, na.rm = TRUE), .groups = "drop")

# Convertir a dos arrays separados (uno por continente)
europa1<- media_por_continente1 %>%
  filter(CONTINENTE == "Europa") %>%
  pull(media_GNP)

africa1 <- media_por_continente1 %>%
  filter(CONTINENTE == "África") %>%
  pull(media_GNP)

graficoGNPE <-ggplot(media_por_continente1 %>% filter(CONTINENTE == "EUROPA"), 
                         aes(x = year, y = media_GNP, group = CONTINENTE, color = CONTINENTE)) +
  geom_line() +
  theme_minimal() +theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  labs(title = "Europa", x = "Año", y = "GNP") +
  theme(legend.position = "none")

graficoGNPA <-ggplot(media_por_continente1 %>% filter(CONTINENTE == "AFRICA"), 
                         aes(x = year, y = media_GNP, group = CONTINENTE, color = CONTINENTE)) +
  geom_line() +
  theme_minimal() +theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  labs(title = "AFRICA", x = "Año", y = "GNP") +
  theme(legend.position = "none")
```

```{r}
europa_data$CHI <- NULL
europa_data$IE <- NULL
europa_data$ILE <- NULL
europa_data$II <- NULL
```

```{r}
africa_data$CHI <- NULL
africa_data$II<- NULL
africa_data$ILE <- NULL
africa_data$IE <- NULL
```

```{r}
africa_data$'HDI Rank' <- NULL
```

```{r}
europa_data$'HDI Rank' <- NULL
```

```{r}
europa_data <- na.omit(europa_data)
```

```{r}
africa_data <- na.omit(africa_data)
```

```{r}
library(corrplot)
cor_spearman_europa <- cor(europa_data[, 5:ncol(europa_data)], 
                           method = "pearson", 
                           use = "pairwise.complete.obs")
corrplot(cor_spearman_europa, method = "color", type = "upper", 
         tl.cex = 0.7, title = "Correlaciones de Spearman en Europa", 
         addCoef.col = "black", number.cex = 0.7, mar = c(0, 0, 2, 0))
```

```{r}
cor_spearman <- cor(africa_data[, 5:ncol(africa_data)], 
                           method = "spearman", 
                           use = "pairwise.complete.obs")
corrplot(cor_spearman, method = "color", type = "upper", 
         tl.cex = 0.7, title = "Correlaciones de Spearman en África", 
         addCoef.col = "black", number.cex = 0.7, mar = c(0, 0, 2, 0))
```

```{r}
MFCE<-ggplot(europa_data%>% mutate(year=as.numeric(year)), aes(x = MFC, y = HDI, color = year)) +
  geom_point(size = 2) +
  labs(x = "MFC", y = "IDH", color = "Año") +
  scale_color_gradient2(low="blue",midpoint = 2010,mid ="gray80" , high="red")+
  theme_bw()
MFCA<-ggplot(africa_data%>% mutate(year=as.numeric(year)), aes(x = MFC, y = HDI, color = year)) +
  geom_point(size = 2) +
  labs(x = "MFC", y = "IDH", color = "Año") +
  scale_color_gradient2(low="blue",midpoint = 2010,mid ="gray80" , high="red")+
  theme_bw()

MFCE
MFCA
```

```{r}
GSE<-ggplot(europa_data%>% mutate(year=as.numeric(year)), aes(x = gasto_salud, y = HDI, color = year)) +
  geom_point(size = 2) +
  labs(x = "Gasto en Salud", y = "IDH", color = "Año") +
  scale_color_gradient2(low="blue",midpoint = 2010,mid ="gray80" , high="red")+
  theme_bw()
GSA<-ggplot(africa_data%>% mutate(year=as.numeric(year)), aes(x = gasto_salud, y = HDI, color = year)) +
  geom_point(size = 2) +
  labs(x = "Gasto en Salud", y = "IDH", color = "Año") +
  scale_color_gradient2(low="blue",midpoint = 2010,mid ="gray80" , high="red")+
  theme_bw()
GSE
GSA
```

```{r}

GSAL<-ggplot(africa_data%>% mutate(year=as.numeric(year)), aes(x = log(gasto_salud), y = HDI, color = year)) +
  geom_point(size = 2) +
  geom_smooth(method = "lm", se = FALSE, color = "black")+
  labs(x = "Gasto en salud", y = "IDH", color = "Año") +
  scale_color_gradient2(low="blue",midpoint = 2010,mid ="gray80" , high="red")+
  theme_bw()
GSAL
```

```{r}
LMAGS <- lm(HDI ~ log(gasto_salud),
                data =africa_data)
summary(LMAGS)
plot(LMAGS)
```

```{r}
residuos_dfGSA <- data.frame(
  residuos_est = rstandard(LMAGS)
)
QQPLOTA<- ggplot(residuos_dfGSA, aes(sample = residuos_est)) +
  stat_qq(color = "#0072B2", size = 2, alpha = 0.7) +          # puntos
  stat_qq_line(color = "#D55E00", linewidth = 1.2, linetype = "dashed") +  # línea de referencia
  labs(title = "QQ Plot de los residuos estandarizados",
       x = "Cuantiles teóricos",
       y = "Cuantiles de los residuos") +
  theme_minimal(base_size = 14) +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold"),
    panel.grid.major = element_line(color = "gray90")
  )
QQPLOTA
```

```{r}
residuosGSA <- data.frame(
  fitted = fitted(LMAGS),
  resid = resid(LMAGS)
)

ResidualsvsfittedLMAGS <- ggplot(residuosGSA, aes(x = fitted, y = resid)) +
  geom_point(color = "#0072B2", alpha = 0.6, size = 2) +         # puntos
  geom_smooth(method = "loess", se = FALSE, color = "#D55E00", linewidth = 1.2) +  # curva de tendencia
  geom_hline(yintercept = 0, linetype = "dashed", color = "gray40") +  # línea base
  labs(title = "Residuals vs Fitted Values",
       x = "Fitted values",
       y = "Residuals") +
  theme_minimal(base_size = 14) +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold"),
    panel.grid.major = element_line(color = "gray90")
  )
ResidualsvsfittedLMAGS
```

```{r}
library(lmtest)
bptest(LMAGS)
```

```{r}
GSEL<-ggplot(europa_data%>% mutate(year=as.numeric(year)), aes(x = log(gasto_salud), y = HDI, color = year)) +
  geom_point(size = 2) +
  geom_smooth(method = "lm", se = FALSE, color = "black")+
  labs(x = "Gasto en salud", y = "IDH", color = "Año") +
  scale_color_gradient2(low="blue",midpoint = 2010,mid ="gray80" , high="red")+
  theme_bw()

GSEL
LMEGS <- lm(HDI ~ log(gasto_salud),
                data =europa_data)
summary(LMEGS)
plot(LMEGS)
bptest(LMEGS)
```

```{r}
residuos_dfGSE <- data.frame(
  residuos_est = rstandard(LMEGS)
)
QQPLOT<- ggplot(residuos_dfGSE, aes(sample = residuos_est)) +
  stat_qq(color = "#0072B2", size = 2, alpha = 0.7) +          # puntos
  stat_qq_line(color = "#D55E00", linewidth = 1.2, linetype = "dashed") +  # línea de referencia
  labs(title = "QQ Plot de los residuos estandarizados",
       x = "Cuantiles teóricos",
       y = "Cuantiles de los residuos") +
  theme_minimal(base_size = 14) +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold"),
    panel.grid.major = element_line(color = "gray90")
  )

```

```{r}
residuosGSE <- data.frame(
  fitted = fitted(LMEGS),
  resid = resid(LMEGS)
)

ResidualsvsfittedLMEGS <- ggplot(residuosGSE, aes(x = fitted, y = resid)) +
  geom_point(color = "#0072B2", alpha = 0.6, size = 2) +         # puntos
  geom_smooth(method = "loess", se = FALSE, color = "#D55E00", linewidth = 1.2) +  # curva de tendencia
  geom_hline(yintercept = 0, linetype = "dashed", color = "gray40") +  # línea base
  labs(title = "Residuals vs Fitted Values",
       x = "Fitted values",
       y = "Residuals") +
  theme_minimal(base_size = 14) +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold"),
    panel.grid.major = element_line(color = "gray90")
  )

```

```{r}
MMRA<-ggplot(africa_data%>% mutate(year=as.numeric(year)), aes(x = MMR, y = HDI, color = year)) +
  geom_point(size = 2) +
  labs(x = "MMR", y = "IDH", color = "Año") +
  scale_color_gradient2(low="blue",midpoint = 2010,mid ="gray80" , high="red")+
  theme_bw()
MMRE<-ggplot(europa_data%>% mutate(year=as.numeric(year)), aes(x = MMR, y = HDI, color = year)) +
  geom_point(size = 2) +
  labs(x = "MMR", y = "IDH", color = "Año") +
  scale_color_gradient2(low="blue",midpoint = 2010,mid ="gray80" , high="red")+
  theme_bw()
MMRA
MMRE
```

```{r}
GIIA<-ggplot(africa_data%>% mutate(year=as.numeric(year)), aes(x = GII, y = HDI, color = year)) +
  geom_point(size = 2) +
  labs(x = "GII", y = "IDH", color = "Año") +
  scale_color_gradient2(low="blue",midpoint = 2010,mid ="gray80" , high="red")+
  theme_bw()
GIIE<-ggplot(europa_data%>% mutate(year=as.numeric(year)), aes(x = GII, y = HDI, color = year)) +
  geom_point(size = 2) +
  labs(x = "GII", y = "IDH", color = "Año") +
  scale_color_gradient2(low="blue",midpoint = 2010,mid ="gray80" , high="red")+
  theme_bw()
GIIA
GIIE
LMGIIA <-lm(HDI ~ GII,data =africa_data)
plot(LMGIIA)
summary(LMGIIA)
```

```{r}
APA<-ggplot(africa_data%>% mutate(year=as.numeric(year)), aes(x = AGUAPOTABLE, y = HDI, color = year)) +
  geom_point(size = 2) +
  labs(x = "Agua potable", y = "IDH", color = "Año") +
  scale_color_gradient2(low="blue",midpoint = 2010,mid ="gray80" , high="red")+
  theme_bw()
APE<-ggplot(europa_data%>% mutate(year=as.numeric(year)), aes(x = AGUAPOTABLE, y = HDI, color = year)) +
  geom_point(size = 2) +
  labs(x = "Agua potable", y = "IDH", color = "Año") +
  scale_color_gradient2(low="blue",midpoint = 2010,mid ="gray80" , high="red")+
  theme_bw()
APA
APE
```

```{r}
CPIE<-ggplot(europa_data%>% mutate(year=as.numeric(year)), aes(x = CPI, y = HDI, color = year)) +
  geom_point(size = 2) +
  labs(x = "CPI", y = "IDH", color = "Año") +
  scale_color_gradient2(low="blue",midpoint = 2010,mid ="gray80" , high="red")+
  theme_bw()
CPIE
```

```{r}
SSPFE<-ggplot(europa_data%>% mutate(year=as.numeric(year)), aes(x = SSPF, y = HDI, color = year)) +
  geom_point(size = 2) +
  labs(x = "SSPF", y = "IDH", color = "Año") +
  scale_color_gradient2(low="blue",midpoint = 2010,mid ="gray80" , high="red")+
  theme_bw()
SSPFE
```

```{r}
LFPFA<-ggplot(africa_data%>% mutate(year=as.numeric(year)), aes(x = LFPF, y = HDI, color = year)) +
  geom_point(size = 2) +
  labs(x = "LFPF", y = "IDH", color = "Año") +
  scale_color_gradient2(low="blue",midpoint = 2010,mid ="gray80" , high="red")+
  theme_bw()

```

```{r}
AEA<-ggplot(africa_data%>% mutate(year=as.numeric(year)), aes(x = AccesoElectricidad, y = HDI, color = year)) +
  geom_point(size = 2) +
  labs(x = "Acceso electricidad", y = "IDH", color = "Año") +
  scale_color_gradient2(low="blue",midpoint = 2010,mid ="gray80" , high="red")+
  theme_bw()
AEA
```

```{r}
CO2A<-ggplot(africa_data%>% mutate(year=as.numeric(year)), aes(x = CO2, y = HDI, color = year)) +
  geom_point(size = 2) +
  labs(x = "CO2", y = "IDH", color = "Año") +
  scale_color_gradient2(low="blue",midpoint = 2010,mid ="gray80" , high="red")+
  theme_bw()
CO2A
CO2E<-ggplot(europa_data%>% mutate(year=as.numeric(year)), aes(x = CO2, y = HDI, color = year)) +
  geom_point(size = 2) +
  labs(x = "CO2", y = "IDH", color = "Año") +
  scale_color_gradient2(low="blue",midpoint = 2010,mid ="gray80" , high="red")+
  theme_bw()

```

```{r}

CO2AL<-ggplot(africa_data%>% mutate(year=as.numeric(year)), aes(x = log(CO2), y = HDI, color = year)) +
  geom_point(size = 2) +
  geom_smooth(method = "lm", se = FALSE, color = "black")+
  labs(x = "CO2", y = "IDH", color = "Año") +
  scale_color_gradient2(low="blue",midpoint = 2010,mid ="gray80" , high="red")+
  theme_bw()
CO2AL
```

```{r}
LMCO2A <-lm(HDI ~ log(CO2),data =africa_data)
summary(LMCO2A)
plot(LMCO2A)
```

```{r}
residuos_dfCO2A <- data.frame(
  residuos_est = rstandard(LMCO2A)
)
QQPLOTCO2<- ggplot(residuos_dfCO2A, aes(sample = residuos_est)) +
  stat_qq(color = "#0072B2", size = 2, alpha = 0.7) +          # puntos
  stat_qq_line(color = "#D55E00", linewidth = 1.2, linetype = "dashed") +  # línea de referencia
  labs(title = "QQ Plot de los residuos estandarizados",
       x = "Cuantiles teóricos",
       y = "Cuantiles de los residuos") +
  theme_minimal(base_size = 14) +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold"),
    panel.grid.major = element_line(color = "gray90")
  )
```

```{r}
residuosLMCO2A <- data.frame(
  fitted = fitted(LMCO2A),
  resid = resid(LMCO2A)
)

ResidualsvsfittedCO2A <- ggplot(residuosLMCO2A, aes(x = fitted, y = resid)) +
  geom_point(color = "#0072B2", alpha = 0.6, size = 2) +         # puntos
  geom_smooth(method = "loess", se = FALSE, color = "#D55E00", linewidth = 1.2) +  # curva de tendencia
  geom_hline(yintercept = 0, linetype = "dashed", color = "gray40") +  # línea base
  labs(title = "Residuals vs Fitted Values",
       x = "Fitted values",
       y = "Residuals") +
  theme_minimal(base_size = 14) +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold"),
    panel.grid.major = element_line(color = "gray90")
  )
```

# MODELOS

## Modelos Lineales Generalizados

### Modelo GLM EUROPA

```{r}
modelo_glmEuropa33 <- glmmTMB(HDI ~ CPI + GII + LFPF + log(gasto_salud) + AGUAPOTABLE + SSPF,
                           family = beta_family(),
                           data = europa_data)

r2(modelo_glmEuropa33)
summary(modelo_glmEuropa33)
```

Analizamos los residuos del modelo

```{r}


# Data frame con residuos y valores ajustados
df_residuos1 <- data.frame(
  Ajustados = fitted(modelo_glmEuropa33),
  Residuos = resid(modelo_glmEuropa33, type = "pearson")
)

# Gráfico mejorado
ggplot(df_residuos1, aes(x = Ajustados, y = Residuos)) +
  geom_point(alpha = 0.7, color = "#0072B2") +
  geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
  labs(
    title="Residuos de Pearson vs. Valores Ajustados",
    x = "Valores ajustados",
    y = "Residuos de Pearson"
  ) +
  theme_minimal(base_size = 13)

```

```{r}
ggplot(df_residuos1, aes(sample = Residuos)) +
     stat_qq(alpha = 0.7, color = "#009E73") +
     stat_qq_line(color = "red", linetype = "dotted") +
    labs(
        title = "Q-Q Plot de los Residuos de Pearson",
         x = "Cuantiles teóricos",
         y = "Cuantiles de los residuos"
     ) +
  theme_minimal(base_size = 13)
```

```{r}
library(qqplotr)
ggplot(df_residuos1, aes(sample = Residuos)) +
  stat_qq_band(distribution = "norm", alpha = 0.3, fill = "#56B4E9") +  # Banda de confianza
  stat_qq_point(alpha = 0.7, color = "#009E73") +
  stat_qq_line(distribution = "norm", color = "red", linetype = "dotted") +
  labs(
    x = "Cuantiles teóricos",
    y = "Cuantiles de los residuos"
  ) +
  theme_minimal(base_size = 13)
```

Multicolinealidad

```{r}
check_collinearity(modelo_glmEuropa33)
```

```{r}
# Calcula R2 para tu modelo
r2_glmmTMB <- r2(modelo_glmEuropa33)

print(r2_glmmTMB)

```

### Modelo GLM ÁFRICA

```{r}
modelo_glmAfrica33 <- glmmTMB(HDI ~ log(CO2)+GII+log(gasto_salud)+AGUAPOTABLE+AccesoElectricidad+MMR,
                           family = beta_family(),
                           data = africa_data)


summary(modelo_glmAfrica33)
r2(modelo_glmAfrica33)
check_collinearity(modelo_glmAfrica33)


```

```{r}
df_residuos22 <- data.frame(
  Ajustados = fitted(modelo_glmAfrica33),
  Residuos = resid(modelo_glmAfrica33, type = "pearson")
)

# Gráfico mejorado
ggplot(df_residuos22, aes(x = Ajustados, y = Residuos)) +
  geom_point(alpha = 0.7, color = "#0072B2") +
  geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
  labs(
    title="Residuos de Pearson vs. Valores Ajustados",
    x = "Valores ajustados",
    y = "Residuos de Pearson"
  ) +
  theme_minimal(base_size = 13)
```

```{r}
ggplot(df_residuos22, aes(sample = Residuos)) +
  stat_qq_band(distribution = "norm", alpha = 0.3, fill = "#56B4E9") +  # Banda de confianza
  stat_qq_point(alpha = 0.7, color = "#009E73") +
  stat_qq_line(distribution = "norm", color = "red", linetype = "dotted") +
  labs(
    x = "Cuantiles teóricos",
    y = "Cuantiles de los residuos"
  ) +
  theme_minimal(base_size = 13)
```

```{r}
pred_glm <- predict(modelo_glmAfrica33, type = "response")

# Calcular el MSE manualmente
mse_glm <- mean((africa_data$HDI - pred_glm)^2)

# Mostrar el resultado
print(mse_glm)
```

## Modelos GAM

### Modelos GAM EUROPA

```{r}
modelogamEuropa<- gam(HDI ~ CPI + GII  + s(MFC) + s(MMR,k=13) + s(SSPF,k=13) + log(gasto_salud) + s(AGUAPOTABLE,k=13) ,
              data = europa_data,
              family = betar(link = "logit"), method = "GCV")
summary(modelogamEuropa)
plot(modelogamEuropa)
concurvity(modelogamEuropa,full = FALSE)
extractAIC(modelogamEuropa)
```

```{r}
residuosgam <- data.frame(Residuos = residuals(modelogamEuropa, type = "deviance"))

# 3. Crear QQ-plot con ggplot2 + qqplotr
ggplot(residuosgam , aes(sample = Residuos)) +
  stat_qq_band(distribution = "norm", alpha = 0.3, fill = "#56B4E9") +  # Banda de confianza
  stat_qq_point(alpha = 0.7, color = "#009E73") +
  stat_qq_line(distribution = "norm", color = "red", linetype = "dotted") +
  labs(
    title = "QQ-plot de residuos del modelo GAM (Europa)",
    x = "Cuantiles teóricos",
    y = "Cuantiles de los residuos"
  ) +
  theme_minimal(base_size = 13)
```

```{r}
residuos22 <- residuals(modelogamEuropa)
hist(residuos22, breaks = 20, col = "skyblue", main = "Histograma de residuos", xlab = "Residuos")
```

```{r}
residuosgam2 <- data.frame(
  Ajustados = fitted(modelogamEuropa),                      # Valores ajustados
  Residuos = residuals(modelogamEuropa, type = "pearson")   # Residuos de Pearson
)

# 2. Gráfico con ggplot2
ggplot(residuosgam2, aes(x = Ajustados, y = Residuos)) +
  geom_point(alpha = 0.7, color = "#0072B2") +
  geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
  labs(
    
    x = "Valores ajustados",
    y = "Residuos de Pearson"
  ) +
  theme_minimal(base_size = 13)
```

```{r}
pls_model <- plsr(HDI ~GII +CPI+log(gasto_salud), scale = TRUE, data = europa_data, validation = "CV")

# Ver cuántos componentes usar
summary(pls_model)
```

```{r}
pred_gam <- predict(modelogamEuropa, type = "response")

# Calcular el MSE comparando con los valores reales
mse_gam <- mean((europa_data$HDI - pred_gam)^2)

# Imprimir resultado
print(mse_gam)
```

```{r}
scores_pls <- pls_model$scores[, 1:2]  # Usar los primeros dos componentes
#scores_pls 
#pls_model$loading.weights
```

```{r}
europa_data$scores_1 <- scores_pls[, 1]  # Primer componente
europa_data$scores_2 <- scores_pls[, 2]   # Primer componente


gamgam_pls <- gam(HDI ~   s(SSPF, bs = "ps") + s(MMR, bs = "tp") + s(AGUAPOTABLE)+ +scores_1+ scores_2, 
                  data = europa_data, 
                  select = TRUE, 
                  family = betar(link = "logit"), 
                  method = "GCV")
gam.check(gamgam_pls)
summary(gamgam_pls)
concurvity(gamgam_pls)
```

```{r}

gamgam_pls2 <- gam(HDI ~ s(LFPF) + s(MMR) +scores_1,  
                  data = europa_data, 
                  select = TRUE, 
                  family = betar(link = "logit"), 
                  method = "REML")
summary(gamgam_pls2)
concurvity(gamgam_pls2)
gam.check(gamgam_pls2)
plot(gamgam_pls2)
```

```         
```

```{r}
library(fitdistrplus)

# Extraer la variable
idh <- europa_data$HDI

# Escalar a (0, 1) si no lo está (solo si necesario)
idh_scaled <- (idh - min(idh)) / (max(idh) - min(idh))

# Ajustar distribución beta
fit <- fitdist(idh_scaled, "beta")

# Curva de densidad beta ajustada
x_vals <- seq(0, 1, length.out = 500)
beta_curve <- dbeta(x_vals,
                    shape1 = fit$estimate["shape1"],
                    shape2 = fit$estimate["shape2"])
df_curve <- data.frame(x = x_vals, y = beta_curve)

# Graficar
ggplot(data.frame(idh_scaled), aes(x = idh_scaled)) +
  geom_histogram(aes(y = ..density..), bins = 30,
                 fill = "skyblue", color = "black", alpha = 0.7) +
 geom_line(data = df_curve, aes(x = x, y = y), color = "red", linewidth = 1.2) +
  labs(title = "Ajuste de una distribución beta al IDH",
       x = "IDH (escalado)", y = "Densidad")
fit$estimate
```

```         
```

```{r}
library(fitdistrplus)
library(goftest)


fit_beta <- fitdist(europa_data$HDI, "beta", method = "mle")

# Ver resumen del ajuste
summary(fit_beta)

# Graficar el ajuste (opcional)
plot(fit_beta)

# Usar test de Anderson-Darling (más adecuado con ties)
ad_test <- ad.test(europa_data$HDI, null = function(x) pbeta(x,
    shape1 = fit_beta$estimate["shape1"],
    shape2 = fit_beta$estimate["shape2"]))

print(ad_test)
```

### Modelo GAM África

```{r}
modelogamAfrica<- gam(HDI ~ log(gasto_salud)+log(CO2)+AccesoElectricidad+s(LFPF)+s(MMR)+GII ,
              data = africa_data,
              family = betar(link = "logit"), method = "GCV")
summary(modelogamAfrica)
plot(modelogamAfrica)
concurvity(modelogamAfrica,full = FALSE)
extractAIC(modelogamAfrica)
```

```{r}
residuosgamAfrica <- data.frame(Residuos = residuals(modelogamAfrica, type = "deviance"))

# 3. Crear QQ-plot con ggplot2 + qqplotr
ggplot(residuosgamAfrica , aes(sample = Residuos)) +
  stat_qq_band(distribution = "norm", alpha = 0.3, fill = "#56B4E9") +  # Banda de confianza
  stat_qq_point(alpha = 0.7, color = "#009E73") +
  stat_qq_line(distribution = "norm", color = "red", linetype = "dotted") +
  labs(
    
    x = "Cuantiles teóricos",
    y = "Cuantiles de los residuos"
  ) +
  theme_minimal(base_size = 13)
```

```{r}
residuosgamA2 <- data.frame(
  Ajustados = fitted(modelogamAfrica),                      # Valores ajustados
  Residuos = residuals(modelogamAfrica, type = "pearson")   # Residuos de Pearson
)

# 2. Gráfico con ggplot2
ggplot(residuosgamA2, aes(x = Ajustados, y = Residuos)) +
  geom_point(alpha = 0.7, color = "#0072B2") +
  geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
  labs(
    
    x = "Valores ajustados",
    y = "Residuos de Pearson"
  ) +
  theme_minimal(base_size = 13)
```

```{r}
pred_gam1 <- predict(modelogamAfrica, type = "response")

# Calcular el MSE comparando con los valores reales
mse_gam1 <- mean((africa_data$HDI - pred_gam1)^2)

# Imprimir resultado
print(mse_gam1)
```
